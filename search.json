[{"path":"https://rmagno.eu/ensemblr/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (https://www.contributor-covenant.org), version 1.0.0, available https://contributor-covenant.org/version/1/0/0/.","code":""},{"path":"https://rmagno.eu/ensemblr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2019 Ramiro Magno Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://rmagno.eu/ensemblr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ramiro Magno. Author, maintainer. Isabel Duarte. Author. Ana-Teresa Maia. Author. . Copyright holder, funder. . Copyright holder, funder.","code":""},{"path":"https://rmagno.eu/ensemblr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Magno R, Duarte , Maia (2023). ensemblr: R Client Ensembl REST API. https://github.com/ramiromagno/ensemblr, http://rmagno.eu/ensemblr/.","code":"@Manual{,   title = {ensemblr: R Client for the Ensembl REST API},   author = {Ramiro Magno and Isabel Duarte and Ana-Teresa Maia},   year = {2023},   note = {https://github.com/ramiromagno/ensemblr, http://rmagno.eu/ensemblr/}, }"},{"path":"https://rmagno.eu/ensemblr/index.html","id":"ensemblr-","dir":"","previous_headings":"","what":"R Client for the Ensembl REST API","title":"R Client for the Ensembl REST API","text":"goal ensemblr provide R client Ensembl REST API. Please note package still infancy hence small fraction resources exposed Ensembl REST API retrievable via ensemblr. can check functionality covered far Ensembl REST API Coverage.","code":""},{"path":"https://rmagno.eu/ensemblr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R Client for the Ensembl REST API","text":"can install current, experimental version ensemblr :","code":"# install.packages(\"remotes\") remotes::install_github(\"ramiromagno/ensemblr\")"},{"path":"https://rmagno.eu/ensemblr/index.html","id":"cheatsheet","dir":"","previous_headings":"","what":"Cheatsheet","title":"R Client for the Ensembl REST API","text":"TODO","code":""},{"path":"https://rmagno.eu/ensemblr/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"R Client for the Ensembl REST API","text":"Retrieve human linkage disequilibrium information variants within 1 kilobase window centred variant 'rs123':","code":"library(ensemblr) get_ld_variants_by_window('rs123', genomic_window_size = 1L) #> # A tibble: 6 × 6 #>   species_name population              variant_id1 variant_id2 r_squared d_prime #>   <chr>        <chr>                   <chr>       <chr>           <dbl>   <dbl> #> 1 homo_sapiens 1000GENOMES:phase_3:CEU rs123       rs114           0.475   0.703 #> 2 homo_sapiens 1000GENOMES:phase_3:CEU rs123       rs10239961      0.255   1.00  #> 3 homo_sapiens 1000GENOMES:phase_3:CEU rs123       rs122           0.722   1.00  #> 4 homo_sapiens 1000GENOMES:phase_3:CEU rs123       rs115           0.721   1.00  #> 5 homo_sapiens 1000GENOMES:phase_3:CEU rs123       rs124           0.722   1.00  #> 6 homo_sapiens 1000GENOMES:phase_3:CEU rs123       rs12536724      0.255   1.00"},{"path":"https://rmagno.eu/ensemblr/index.html","id":"contributors","dir":"","previous_headings":"","what":"Contributors","title":"R Client for the Ensembl REST API","text":"Please note ensemblr project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://rmagno.eu/ensemblr/index.html","id":"logo","dir":"","previous_headings":"","what":"Logo","title":"R Client for the Ensembl REST API","text":"ensemblr logo, ensemblr.png, derivative work illustration “small DNA double helix PDB entry 309d” David S. Goodsell RCSB PDB, used CC--4.0. ensemblr.png licensed CC--4.0 Ramiro Magno.","code":""},{"path":"https://rmagno.eu/ensemblr/index.html","id":"similar-projects","dir":"","previous_headings":"","what":"Similar projects","title":"R Client for the Ensembl REST API","text":"R package rensembl David Winter: https://github.com/dwinter/rensembl Python package ensembl-rest Andrés García: https://github.com/Ad115/EnsemblRest Python package ensembl Katsuya Noguchi: https://github.com/kn/ensembl","code":""},{"path":"https://rmagno.eu/ensemblr/reference/are_vec_recyclable.html","id":null,"dir":"Reference","previous_headings":"","what":"Are vectors recyclable? — are_vec_recyclable","title":"Are vectors recyclable? — are_vec_recyclable","text":"vectors recyclable?","code":""},{"path":"https://rmagno.eu/ensemblr/reference/are_vec_recyclable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Are vectors recyclable? — are_vec_recyclable","text":"","code":"are_vec_recyclable(...)"},{"path":"https://rmagno.eu/ensemblr/reference/are_vec_recyclable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Are vectors recyclable? — are_vec_recyclable","text":"... Vectors tested recycling.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/are_vec_recyclable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Are vectors recyclable? — are_vec_recyclable","text":"scalar logical: TRUE FALSE.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/code_to_strand.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert strand integer codes to strand words — code_to_strand","title":"Convert strand integer codes to strand words — code_to_strand","text":"function converts integer vector values 1L -1L 'forward' 'reverse', respectively.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/code_to_strand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert strand integer codes to strand words — code_to_strand","text":"","code":"code_to_strand(code, .default = NA_character_, .missing = NA_character_)"},{"path":"https://rmagno.eu/ensemblr/reference/code_to_strand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert strand integer codes to strand words — code_to_strand","text":"code Integer vector strandness codes: 1L -1L. .default value use default values 1L -1L. .missing value use recoding NA_integer_.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/code_to_strand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert strand integer codes to strand words — code_to_strand","text":"character vector.","code":""},{"path":[]},{"path":"https://rmagno.eu/ensemblr/reference/ensembl_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensembl REST API server — ensembl_server","title":"Ensembl REST API server — ensembl_server","text":"Ensembl REST API server","code":""},{"path":"https://rmagno.eu/ensemblr/reference/ensembl_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensembl REST API server — ensembl_server","text":"","code":"ensembl_server()"},{"path":"https://rmagno.eu/ensemblr/reference/ensembl_server.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensembl REST API server — ensembl_server","text":"string containing Ensembl REST API server URL.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/genomic_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Create genomic range strings — genomic_range","title":"Create genomic range strings — genomic_range","text":"function converts three vectors: chr, start, end strings form {chr}:{start}..{end}.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/genomic_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create genomic range strings — genomic_range","text":"","code":"genomic_range(chr, start, end, starting_position_index = 1L)"},{"path":"https://rmagno.eu/ensemblr/reference/genomic_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create genomic range strings — genomic_range","text":"chr character vector chromosome names. start integer vector start positions. end integer vector end positions. starting_position_index Use argument indicate positions 0-based (0L) 1-based (1L). value used check positions equal number.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/genomic_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create genomic range strings — genomic_range","text":"Returns character vector whose strings genomic ranges form {chr}:{start}..{end}.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/genomic_range.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create genomic range strings — genomic_range","text":"","code":"genomic_range(\"1\", 10000L, 20000L) # Returns \"1:10000..20000\" #> [1] \"1:10000..20000\""},{"path":"https://rmagno.eu/ensemblr/reference/get_analyses.html","id":null,"dir":"Reference","previous_headings":"","what":"Get analyses behind Ensembl databases — get_analyses","title":"Get analyses behind Ensembl databases — get_analyses","text":"function retrieves table analyses involved generation data different Ensembl databases.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_analyses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get analyses behind Ensembl databases — get_analyses","text":"","code":"get_analyses(   species_name,   verbose = FALSE,   warnings = TRUE,   progress_bar = TRUE )"},{"path":"https://rmagno.eu/ensemblr/reference/get_analyses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get analyses behind Ensembl databases — get_analyses","text":"species_name species name, .e., scientific name, letters lowercase space replaced underscore. Examples: 'homo_sapiens' (human), 'ovis_aries' (Domestic sheep) 'capra_hircus' (Goat). verbose Whether verbose http requests respective responses' status. warnings Whether show warnings. progress_bar Whether show progress bar.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_analyses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get analyses behind Ensembl databases — get_analyses","text":"tibble 3 variables: species_name Ensembl species name: name used   internally Ensembl uniquely identify species name.   scientific name formatted without capitalisation spacing converted   underscore, e.g., 'homo_sapiens'. database Ensembl database. Typically one 'core',   'rnaseq', 'cdna', 'funcgen'   'otherfeatures'. analysis Analysis.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_assemblies.html","id":null,"dir":"Reference","previous_headings":"","what":"Get details about the genome assembly of a species — get_assemblies","title":"Get details about the genome assembly of a species — get_assemblies","text":"functions retrieves details assembly queried species.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_assemblies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get details about the genome assembly of a species — get_assemblies","text":"","code":"get_assemblies(   species_name = \"homo_sapiens\",   verbose = FALSE,   warnings = TRUE,   progress_bar = TRUE )"},{"path":"https://rmagno.eu/ensemblr/reference/get_assemblies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get details about the genome assembly of a species — get_assemblies","text":"species_name species name, .e., scientific name, letters lowercase space replaced underscore. Examples: 'homo_sapiens' (human), 'ovis_aries' (Domestic sheep) 'capra_hircus' (Goat). verbose Whether chatty. warnings Whether print warnings. progress_bar Whether show progress bar.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_assemblies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get details about the genome assembly of a species — get_assemblies","text":"tibble, row toplevel sequence, 4 variables: species_name Ensembl species name: name used internally Ensembl uniquely identify species name. scientific name formatted without capitalisation spacing converted underscore, e.g., 'homo_sapiens'. assembly_name Assembly name. assembly_date Assembly date. genebuild_method Annotation method. golden_path_length Golden path length. genebuild_initial_release_date Genebuild release date. default_coord_system_version Default coordinate system version. assembly_accession Assembly accession. genebuild_start_date Genebuild start date. genebuild_last_geneset_update Genebuild last geneset update.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_assemblies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get details about the genome assembly of a species — get_assemblies","text":"","code":"# Get details about the human assembly get_assemblies() #> # A tibble: 1 × 10 #>   species_name assembly_name assembly_date genebuild_method golden_path_length #>   <chr>        <chr>         <chr>         <chr>                         <dbl> #> 1 homo_sapiens GRCh38.p14    2013-12       full_genebuild           3099750718 #> # ℹ 5 more variables: genebuild_initial_release_date <chr>, #> #   default_coord_system_version <chr>, assembly_accession <chr>, #> #   genebuild_start_date <chr>, genebuild_last_geneset_update <chr>  # Get details about the Mouse and the Fruit Fly genomes get_assemblies(c('mus_musculus', 'drosophila_melanogaster')) #> # A tibble: 2 × 10 #>   species_name   assembly_name assembly_date genebuild_method golden_path_length #>   <chr>          <chr>         <chr>         <chr>                         <dbl> #> 1 mus_musculus   GRCm39        2020-06       full_genebuild           2728222451 #> 2 drosophila_me… BDGP6.46      NA            import                    143726002 #> # ℹ 5 more variables: default_coord_system_version <chr>, #> #   assembly_accession <chr>, genebuild_start_date <chr>, #> #   genebuild_last_geneset_update <chr>, genebuild_initial_release_date <chr>"},{"path":"https://rmagno.eu/ensemblr/reference/get_cytogenetic_bands.html","id":null,"dir":"Reference","previous_headings":"","what":"Get cytogenetic bands by species — get_cytogenetic_bands","title":"Get cytogenetic bands by species — get_cytogenetic_bands","text":"function retrieves cytogenetic bands. cytogenetic information available queried species omitted returned value.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_cytogenetic_bands.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get cytogenetic bands by species — get_cytogenetic_bands","text":"","code":"get_cytogenetic_bands(   species_name = \"homo_sapiens\",   verbose = FALSE,   warnings = TRUE,   progress_bar = TRUE )"},{"path":"https://rmagno.eu/ensemblr/reference/get_cytogenetic_bands.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get cytogenetic bands by species — get_cytogenetic_bands","text":"species_name species name, .e., scientific name, letters lowercase space replaced underscore. Examples: 'homo_sapiens' (human), 'ovis_aries' (Domestic sheep) 'capra_hircus' (Goat). verbose Whether chatty. warnings Whether print warnings. progress_bar Whether show progress bar.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_cytogenetic_bands.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get cytogenetic bands by species — get_cytogenetic_bands","text":"tibble, row cytogenetic band, 8 variables: species_name Ensembl species name: name used internally Ensembl uniquely identify species name. scientific name formatted without capitalisation spacing converted underscore, e.g., 'homo_sapiens'. assembly_name Assembly name. cytogenetic_band Name cytogenetic_band. chromosome Chromosome name. start Genomic start position cytogenetic band. Starts 1. end Genomic end position cytogenetic band. End position included band interval. stain Giemsa stain results: Giemsa negative, 'gneg'; Giemsa positive, increasing intensities, 'gpos25', 'gpos50', 'gpos75', 'gpos100'; centromeric region, 'acen'; heterochromatin, either pericentric telomeric, 'gvar'; short arm acrocentric chromosomes coded 'stalk'. strand Strand.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_cytogenetic_bands.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get cytogenetic bands by species — get_cytogenetic_bands","text":"","code":"# Get toplevel sequences for the human genome (default) get_cytogenetic_bands() #> # A tibble: 862 × 8 #>    species_name assembly_name cytogenetic_band chromosome    start     end stain #>    <chr>        <chr>         <chr>            <chr>         <int>   <int> <chr> #>  1 homo_sapiens GRCh38        p11.1            Y          10300001  1.04e7 acen  #>  2 homo_sapiens GRCh38        p11.2            Y            600001  1.03e7 gneg  #>  3 homo_sapiens GRCh38        p11.31           Y            300001  6   e5 gpos… #>  4 homo_sapiens GRCh38        p11.32           Y                 1  3   e5 gneg  #>  5 homo_sapiens GRCh38        q11.1            Y          10400001  1.06e7 acen  #>  6 homo_sapiens GRCh38        q11.21           Y          10600001  1.24e7 gneg  #>  7 homo_sapiens GRCh38        q11.221          Y          12400001  1.71e7 gpos… #>  8 homo_sapiens GRCh38        q11.222          Y          17100001  1.96e7 gneg  #>  9 homo_sapiens GRCh38        q11.223          Y          19600001  2.38e7 gpos… #> 10 homo_sapiens GRCh38        q11.23           Y          23800001  2.66e7 gneg  #> # ℹ 852 more rows #> # ℹ 1 more variable: strand <int>  # Get toplevel sequences for Mus musculus get_cytogenetic_bands('mus_musculus') #> # A tibble: 82 × 8 #>    species_name assembly_name cytogenetic_band chromosome   start      end stain #>    <chr>        <chr>         <chr>            <chr>        <int>    <int> <chr> #>  1 mus_musculus GRCm39        \"\"               MT               1   1.63e4 gneg  #>  2 mus_musculus GRCm39        \"\"               Y                1   9.15e7 gneg  #>  3 mus_musculus GRCm39        \"cen\"            2           110001   1.56e6 acen  #>  4 mus_musculus GRCm39        \"cen\"            2          1555001   3   e6 acen  #>  5 mus_musculus GRCm39        \"p\"              2                1   1.10e5 gneg  #>  6 mus_musculus GRCm39        \"q\"              2          3000001   1.82e8 gneg  #>  7 mus_musculus GRCm39        \"cen\"            4           110001   1.56e6 acen  #>  8 mus_musculus GRCm39        \"cen\"            4          1555001   3   e6 acen  #>  9 mus_musculus GRCm39        \"p\"              4                1   1.10e5 gneg  #> 10 mus_musculus GRCm39        \"q\"              4          3000001   1.57e8 gneg  #> # ℹ 72 more rows #> # ℹ 1 more variable: strand <int>"},{"path":"https://rmagno.eu/ensemblr/reference/get_data_versions.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the data release version(s) available on the Ensembl REST server. — get_data_versions","title":"Retrieve the data release version(s) available on the Ensembl REST server. — get_data_versions","text":"Retrieve data release version(s) available Ensembl REST server.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_data_versions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the data release version(s) available on the Ensembl REST server. — get_data_versions","text":"","code":"get_data_versions(verbose = FALSE, warnings = TRUE)"},{"path":"https://rmagno.eu/ensemblr/reference/get_data_versions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the data release version(s) available on the Ensembl REST server. — get_data_versions","text":"verbose Whether chatty. warnings Whether print warnings.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_data_versions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the data release version(s) available on the Ensembl REST server. — get_data_versions","text":"integer vector release version(s).","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_divisions.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Ensembl divisions — get_divisions","title":"Retrieve Ensembl divisions — get_divisions","text":"function retrieves Ensembl divisions. Ensembl data split separate databases loosely based taxonomic divisions sub-groups.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_divisions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Ensembl divisions — get_divisions","text":"","code":"get_divisions(verbose = FALSE, warnings = TRUE)"},{"path":"https://rmagno.eu/ensemblr/reference/get_divisions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Ensembl divisions — get_divisions","text":"verbose Whether chatty. warnings Whether print warnings.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_divisions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Ensembl divisions — get_divisions","text":"character vector Ensembl divisions.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_divisions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Ensembl divisions — get_divisions","text":"","code":"# Retrieve a character vector of Ensembl divisions get_divisions() #> [1] \"EnsemblBacteria\"    \"EnsemblProtists\"    \"EnsemblMetazoa\"     #> [4] \"EnsemblPlants\"      \"EnsemblFungi\"       \"EnsemblVertebrates\""},{"path":"https://rmagno.eu/ensemblr/reference/get_ensembl_genomes_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Ensembl Genomes version — get_ensembl_genomes_version","title":"Get Ensembl Genomes version — get_ensembl_genomes_version","text":"Returns Ensembl Genomes version databases backing service.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_ensembl_genomes_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Ensembl Genomes version — get_ensembl_genomes_version","text":"","code":"get_ensembl_genomes_version(verbose = FALSE, warnings = TRUE)"},{"path":"https://rmagno.eu/ensemblr/reference/get_ensembl_genomes_version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Ensembl Genomes version — get_ensembl_genomes_version","text":"verbose Whether chatty. warnings Whether print warnings.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_ensembl_genomes_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Ensembl Genomes version — get_ensembl_genomes_version","text":"integer value: Ensembl Genomes version.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_ensembl_genomes_version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Ensembl Genomes version — get_ensembl_genomes_version","text":"","code":"get_ensembl_genomes_version() #> [1] 57"},{"path":"https://rmagno.eu/ensemblr/reference/get_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Get details about an Ensembl identifier — get_id","title":"Get details about an Ensembl identifier — get_id","text":"function retrieves information one Ensembl identifiers. Ensembl identifiers information available : genes, exons, transcripts proteins.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get details about an Ensembl identifier — get_id","text":"","code":"get_id(id, verbose = FALSE, warnings = TRUE, progress_bar = TRUE)"},{"path":"https://rmagno.eu/ensemblr/reference/get_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get details about an Ensembl identifier — get_id","text":"id character vector Ensembl identifiers. Ensembl identifiers form ENS[species prefix][feature type prefix][unique eleven digit number]. id contain NAs. Please note 'ENSG00000157764' valid identifier query, 'ENSG00000157764.13' . verbose Whether verbose http requests respective responses' status. warnings Whether show warnings. progress_bar Whether show progress bar.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get details about an Ensembl identifier — get_id","text":"tibble 9 variables: id Ensembl identifier. id_latest Ensembl identifier including version suffix. type Entity type: gene ('Gene'), exon ('Exon'),   transcript ('Transcript'), protein ('Translation'). id_version Ensembl identifier version, indicates many   times entity changed time Ensembl. release Ensembl release version. is_current latest identifier represented entity. genome_assembly_name Code name genome assembly. peptide TODO possible_replacement TODO","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get details about an Ensembl identifier — get_id","text":"","code":"get_id(c('ENSDARE00000830915', 'ENSG00000248378', 'ENSDART00000033574', 'ENSP00000000233')) #> # A tibble: 0 × 9 #> # ℹ 9 variables: id <chr>, id_latest <chr>, type <chr>, id_version <int>, #> #   release <int>, is_current <lgl>, genome_assembly_name <chr>, peptide <chr>, #> #   possible_replacement <list>"},{"path":"https://rmagno.eu/ensemblr/reference/get_individuals.html","id":null,"dir":"Reference","previous_headings":"","what":"Get individuals for a population — get_individuals","title":"Get individuals for a population — get_individuals","text":"function retrieves individual-level information. data returned tibble row individual given species columns metadata individual. See section Value details column. Use function get_populations() discover available populations species.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_individuals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get individuals for a population — get_individuals","text":"","code":"get_individuals(   species_name = \"homo_sapiens\",   population = \"1000GENOMES:phase_3:CEU\",   verbose = FALSE,   warnings = TRUE,   progress_bar = TRUE )"},{"path":"https://rmagno.eu/ensemblr/reference/get_individuals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get individuals for a population — get_individuals","text":"species_name species name, .e., scientific name, letters lowercase space replaced underscore. Examples: 'homo_sapiens' (human), 'ovis_aries' (Domestic sheep) 'capra_hircus' (Goat). population Population name. Find available populations given species get_populations. verbose Whether verbose http requests respective responses' status. warnings Whether show warnings. progress_bar Whether show progress bar.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_individuals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get individuals for a population — get_individuals","text":"tibble 5 variables: species_name Ensembl species name: name used internally Ensembl uniquely identify species name. scientific name formatted without capitalisation spacing converted underscore, e.g., 'homo_sapiens'. population Population. description Description population. individual Individual identifier. gender Individual gender.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_individuals.html","id":"ensembl-rest-api-endpoints","dir":"Reference","previous_headings":"","what":"Ensembl REST API endpoints","title":"Get individuals for a population — get_individuals","text":"get_individuals() makes GET requests /info/variation/populations/:species:/:population_name.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_individuals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get individuals for a population — get_individuals","text":"","code":"# Get human individuals for populaton \"1000GENOMES:phase_3:CEU\" (default) get_individuals() #> # A tibble: 99 × 5 #>    species_name population              description            individual gender #>    <chr>        <chr>                   <chr>                  <chr>      <chr>  #>  1 homo_sapiens 1000GENOMES:phase_3:CEU Utah residents with N… 1000GENOM… Female #>  2 homo_sapiens 1000GENOMES:phase_3:CEU Utah residents with N… 1000GENOM… Male   #>  3 homo_sapiens 1000GENOMES:phase_3:CEU Utah residents with N… 1000GENOM… Female #>  4 homo_sapiens 1000GENOMES:phase_3:CEU Utah residents with N… 1000GENOM… Male   #>  5 homo_sapiens 1000GENOMES:phase_3:CEU Utah residents with N… 1000GENOM… Female #>  6 homo_sapiens 1000GENOMES:phase_3:CEU Utah residents with N… 1000GENOM… Male   #>  7 homo_sapiens 1000GENOMES:phase_3:CEU Utah residents with N… 1000GENOM… Female #>  8 homo_sapiens 1000GENOMES:phase_3:CEU Utah residents with N… 1000GENOM… Male   #>  9 homo_sapiens 1000GENOMES:phase_3:CEU Utah residents with N… 1000GENOM… Female #> 10 homo_sapiens 1000GENOMES:phase_3:CEU Utah residents with N… 1000GENOM… Male   #> # ℹ 89 more rows  # Get Finnish individuals (\"1000GENOMES:phase_3:FIN\") get_individuals(population = '1000GENOMES:phase_3:FIN') #> # A tibble: 99 × 5 #>    species_name population              description        individual     gender #>    <chr>        <chr>                   <chr>              <chr>          <chr>  #>  1 homo_sapiens 1000GENOMES:phase_3:FIN Finnish in Finland 1000GENOMES:p… Female #>  2 homo_sapiens 1000GENOMES:phase_3:FIN Finnish in Finland 1000GENOMES:p… Female #>  3 homo_sapiens 1000GENOMES:phase_3:FIN Finnish in Finland 1000GENOMES:p… Male   #>  4 homo_sapiens 1000GENOMES:phase_3:FIN Finnish in Finland 1000GENOMES:p… Female #>  5 homo_sapiens 1000GENOMES:phase_3:FIN Finnish in Finland 1000GENOMES:p… Female #>  6 homo_sapiens 1000GENOMES:phase_3:FIN Finnish in Finland 1000GENOMES:p… Female #>  7 homo_sapiens 1000GENOMES:phase_3:FIN Finnish in Finland 1000GENOMES:p… Female #>  8 homo_sapiens 1000GENOMES:phase_3:FIN Finnish in Finland 1000GENOMES:p… Female #>  9 homo_sapiens 1000GENOMES:phase_3:FIN Finnish in Finland 1000GENOMES:p… Male   #> 10 homo_sapiens 1000GENOMES:phase_3:FIN Finnish in Finland 1000GENOMES:p… Female #> # ℹ 89 more rows"},{"path":"https://rmagno.eu/ensemblr/reference/get_karyotypes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the karyotype of a species — get_karyotypes","title":"Get the karyotype of a species — get_karyotypes","text":"function retrieves set chromosomes species.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_karyotypes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the karyotype of a species — get_karyotypes","text":"","code":"get_karyotypes(   species_name = \"homo_sapiens\",   verbose = FALSE,   warnings = TRUE,   progress_bar = TRUE )"},{"path":"https://rmagno.eu/ensemblr/reference/get_karyotypes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the karyotype of a species — get_karyotypes","text":"species_name species name, .e., scientific name, letters lowercase space replaced underscore. Examples: 'homo_sapiens' (human), 'ovis_aries' (Domestic sheep) 'capra_hircus' (Goat). verbose Whether chatty. warnings Whether print warnings. progress_bar Whether show progress bar.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_karyotypes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the karyotype of a species — get_karyotypes","text":"tibble, row chromosome, 4 variables: species_name Ensembl species name: name used internally Ensembl uniquely identify species name. scientific name formatted without capitalisation spacing converted underscore, e.g., 'homo_sapiens'. coord_system Coordinate system type. chromosome Chromosome name. length Genomic length chromsome base pairs.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_karyotypes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the karyotype of a species — get_karyotypes","text":"","code":"# Get the karyotype of Caenorhabditis elegans get_karyotypes('caenorhabditis_elegans') #> # A tibble: 7 × 4 #>   species_name           coord_system chromosome   length #>   <chr>                  <chr>        <chr>         <int> #> 1 caenorhabditis_elegans chromosome   I          15072434 #> 2 caenorhabditis_elegans chromosome   II         15279421 #> 3 caenorhabditis_elegans chromosome   III        13783801 #> 4 caenorhabditis_elegans chromosome   IV         17493829 #> 5 caenorhabditis_elegans chromosome   V          20924180 #> 6 caenorhabditis_elegans chromosome   X          17718942 #> 7 caenorhabditis_elegans chromosome   MtDNA         13794  # Get the karyotype of the Giant panda get_karyotypes('ailuropoda_melanoleuca') #> # A tibble: 21 × 4 #>    species_name           coord_system     chromosome    length #>    <chr>                  <chr>            <chr>          <int> #>  1 ailuropoda_melanoleuca primary_assembly 1          212770937 #>  2 ailuropoda_melanoleuca primary_assembly 2          199809881 #>  3 ailuropoda_melanoleuca primary_assembly 3          147627920 #>  4 ailuropoda_melanoleuca primary_assembly 4          144794249 #>  5 ailuropoda_melanoleuca primary_assembly 5          130990914 #>  6 ailuropoda_melanoleuca primary_assembly 6          131587389 #>  7 ailuropoda_melanoleuca primary_assembly 7          141533052 #>  8 ailuropoda_melanoleuca primary_assembly 8          129245720 #>  9 ailuropoda_melanoleuca primary_assembly 9          103688518 #> 10 ailuropoda_melanoleuca primary_assembly 10         110580333 #> # ℹ 11 more rows"},{"path":"https://rmagno.eu/ensemblr/reference/get_ld_variants_by_window.html","id":null,"dir":"Reference","previous_headings":"","what":"Get linkage disequilibrium data for variants — get_ld_variants_by_by_window","title":"Get linkage disequilibrium data for variants — get_ld_variants_by_by_window","text":"Gets linkage disequilibrium data variants Ensembl REST API. four ways query, either : Genomic window centred variants: get_ld_variants_by_window(variant_id, genomic_window_size, ...) Pairs variants: get_ld_variants_by_pair(variant_id1, variant_id2, ...) Genomic range: get_ld_variants_by_range(genomic_range, ...) pair combinations variants: get_ld_variants_by_pair_combn(variant_id, ...)","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_ld_variants_by_window.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get linkage disequilibrium data for variants — get_ld_variants_by_by_window","text":"","code":"get_ld_variants_by_window(   variant_id,   genomic_window_size = 500L,   species_name = \"homo_sapiens\",   population = \"1000GENOMES:phase_3:CEU\",   d_prime = 0,   r_squared = 0.05,   verbose = FALSE,   warnings = TRUE,   progress_bar = TRUE )  get_ld_variants_by_pair(   variant_id1,   variant_id2,   species_name = \"homo_sapiens\",   population = \"1000GENOMES:phase_3:CEU\",   d_prime = 0,   r_squared = 0.05,   verbose = FALSE,   warnings = TRUE,   progress_bar = TRUE )  get_ld_variants_by_range(   genomic_range,   species_name = \"homo_sapiens\",   population = \"1000GENOMES:phase_3:CEU\",   d_prime = 0,   r_squared = 0.05,   verbose = FALSE,   warnings = TRUE,   progress_bar = TRUE )  get_ld_variants_by_pair_combn(   variant_id,   species_name = \"homo_sapiens\",   population = \"1000GENOMES:phase_3:CEU\",   d_prime = 0,   r_squared = 0.05,   verbose = FALSE,   warnings = TRUE,   progress_bar = TRUE )"},{"path":"https://rmagno.eu/ensemblr/reference/get_ld_variants_by_window.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get linkage disequilibrium data for variants — get_ld_variants_by_by_window","text":"variant_id Variant identifiers, e.g., 'rs123'. argument used either function get_ld_variants_by_window() get_ld_variants_by_pair_combn(). case get_ld_variants_by_pair_combn() pairwise combinations elements variant_id used define pairs variants querying. Note argument variant_id1 variant_id2, used function get_ld_variants_by_pair. genomic_window_size integer vector specifying genomic window size kilobases (kb) around variant indicated variant_id. argument used function get_ld_variants_by_window(). moment, Ensembl REST API allow values greater 500kb. window size 500 means looking 250kb upstream downstream variant passed variant_id. minimum value argument 1L, 0L. species_name species name, .e., scientific name, letters lowercase space replaced underscore. Examples: 'homo_sapiens' (human), 'ovis_aries' (Domestic sheep) 'capra_hircus' (Goat). population Population compute linkage disequilibrium. See get_populations find available populations species. d_prime \\(D'\\) measure linkage disequilibrium. d_prime defines cut-threshold: variants whose \\(D' \\ge \\)d_prime returned. r_squared \\(r^2\\) measure linkage disequilibrium. r_squared defines cut-threshold: variants whose \\(r^2 \\ge \\)r_squared returned. lower bound r_squared 0.05, 0; upper bound 1. verbose Whether verbose http requests respective responses' status. warnings Whether show warnings. progress_bar Whether show progress bar. variant_id1 first variant pair variants. Used variant_id2. Note argument variant_id. argument used function get_ld_variants_by_pair(). variant_id2 second variant pair variants. Used variant_id1. Note argument variant_id. argument used function get_ld_variants_by_pair(). genomic_range Genomic range formatted string \"chr:start..end\", e.g., \"X:1..10000\". Check function genomic_range easily create ranges vectors start end positions. argument used function get_ld_variants_by_range().","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_ld_variants_by_window.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get linkage disequilibrium data for variants — get_ld_variants_by_by_window","text":"tibble 6 variables: species_name Ensembl species name: name used internally   Ensembl uniquely identify species name. scientific   name formatted without capitalisation spacing converted   underscore, e.g., 'homo_sapiens'. population Population compute linkage disequilibrium. variant_id1 First variant identifier. variant_id2 Second variant identifier. d_prime \\(D'\\) two variants. r_squared \\(r^2\\) two variants.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_ld_variants_by_window.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get linkage disequilibrium data for variants — get_ld_variants_by_by_window","text":"","code":"# Retrieve variants in LD by a window size of 1kb: # 1kb: 500 bp upstream and 500 bp downstream of variant. get_ld_variants_by_window('rs123', genomic_window_size = 1L) #> # A tibble: 6 × 6 #>   species_name population              variant_id1 variant_id2 r_squared d_prime #>   <chr>        <chr>                   <chr>       <chr>           <dbl>   <dbl> #> 1 homo_sapiens 1000GENOMES:phase_3:CEU rs123       rs122           0.722   1.00  #> 2 homo_sapiens 1000GENOMES:phase_3:CEU rs123       rs114           0.475   0.703 #> 3 homo_sapiens 1000GENOMES:phase_3:CEU rs123       rs12536724      0.255   1.00  #> 4 homo_sapiens 1000GENOMES:phase_3:CEU rs123       rs124           0.722   1.00  #> 5 homo_sapiens 1000GENOMES:phase_3:CEU rs123       rs10239961      0.255   1.00  #> 6 homo_sapiens 1000GENOMES:phase_3:CEU rs123       rs115           0.721   1.00   # Retrieve LD measures for pairs of variants: get_ld_variants_by_pair(   variant_id1 = c('rs123', 'rs35439278'),   variant_id2 = c('rs122', 'rs35174522') ) #> # A tibble: 2 × 6 #>   species_name population              variant_id1 variant_id2 r_squared d_prime #>   <chr>        <chr>                   <chr>       <chr>           <dbl>   <dbl> #> 1 homo_sapiens 1000GENOMES:phase_3:CEU rs123       rs122          0.722     1.00 #> 2 homo_sapiens 1000GENOMES:phase_3:CEU rs35439278  rs35174522     0.0973    1.00  # Retrieve variants in LD within a genomic range get_ld_variants_by_range('7:100000..100500') #> # A tibble: 1 × 6 #>   species_name population              variant_id1 variant_id2 r_squared d_prime #>   <chr>        <chr>                   <chr>       <chr>           <dbl>   <dbl> #> 1 homo_sapiens 1000GENOMES:phase_3:CEU rs35439278  rs35174522     0.0973    1.00  # Retrieve all pair combinations of variants in LD get_ld_variants_by_pair_combn(c('rs6978506', 'rs12718102', 'rs13307200')) #> # A tibble: 3 × 6 #>   species_name population              variant_id1 variant_id2 r_squared d_prime #>   <chr>        <chr>                   <chr>       <chr>           <dbl>   <dbl> #> 1 homo_sapiens 1000GENOMES:phase_3:CEU rs6978506   rs12718102      0.111   0.999 #> 2 homo_sapiens 1000GENOMES:phase_3:CEU rs6978506   rs13307200      0.320   1.00  #> 3 homo_sapiens 1000GENOMES:phase_3:CEU rs12718102  rs13307200      0.266   0.875"},{"path":"https://rmagno.eu/ensemblr/reference/get_populations.html","id":null,"dir":"Reference","previous_headings":"","what":"Get populations for a species — get_populations","title":"Get populations for a species — get_populations","text":"function retrieves population-level information. data returned tibble row population given species columns metadata population. See section Value details column. parameter ld_only restrict populations returned populations linkage disequilibrium information.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_populations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get populations for a species — get_populations","text":"","code":"get_populations(   species_name = \"homo_sapiens\",   ld_only = TRUE,   verbose = FALSE,   warnings = TRUE,   progress_bar = TRUE )"},{"path":"https://rmagno.eu/ensemblr/reference/get_populations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get populations for a species — get_populations","text":"species_name species name, .e., scientific name, letters lowercase space replaced underscore. Examples: 'homo_sapiens' (human), 'ovis_aries' (Domestic sheep) 'capra_hircus' (Goat). ld_only Whether restrict populations returned populations linkage disequilibrium data. verbose Whether verbose http requests respective responses' status. warnings Whether show warnings. progress_bar Whether show progress bar.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_populations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get populations for a species — get_populations","text":"tibble 4 variables: species_name Ensembl species name: name used internally Ensembl uniquely identify species name. scientific name formatted without capitalisation spacing converted underscore, e.g., 'homo_sapiens'. population Population. description Description population. cohort_size Cohort sample size.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_populations.html","id":"ensembl-rest-api-endpoints","dir":"Reference","previous_headings":"","what":"Ensembl REST API endpoints","title":"Get populations for a species — get_populations","text":"get_populations() makes GET requests /info/variation/populations/:species.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_populations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get populations for a species — get_populations","text":"","code":"# Get all human populations with linkage disequilibrium data get_populations(species_name = 'homo_sapiens', ld_only = TRUE) #> # A tibble: 30 × 4 #>    species_name population              description                  cohort_size #>    <chr>        <chr>                   <chr>                              <int> #>  1 homo_sapiens 1000GENOMES:phase_3:ACB African Caribbean in Barbad…          96 #>  2 homo_sapiens 1000GENOMES:phase_3:ASW African Ancestry in Southwe…          61 #>  3 homo_sapiens 1000GENOMES:phase_3:BEB Bengali in Bangladesh                 86 #>  4 homo_sapiens 1000GENOMES:phase_3:CDX Chinese Dai in Xishuangbann…          93 #>  5 homo_sapiens 1000GENOMES:phase_3:CEU Utah residents with Norther…          99 #>  6 homo_sapiens 1000GENOMES:phase_3:CHB Han Chinese in Bejing, China         103 #>  7 homo_sapiens 1000GENOMES:phase_3:CHS Southern Han Chinese, China          105 #>  8 homo_sapiens 1000GENOMES:phase_3:CLM Colombian in Medellin, Colo…          94 #>  9 homo_sapiens 1000GENOMES:phase_3:ESN Esan in Nigeria                       99 #> 10 homo_sapiens 1000GENOMES:phase_3:FIN Finnish in Finland                    99 #> # ℹ 20 more rows  # Get all human populations get_populations(species_name = 'homo_sapiens', ld_only = FALSE) #> # A tibble: 37 × 4 #>    species_name population              description                  cohort_size #>    <chr>        <chr>                   <chr>                              <int> #>  1 homo_sapiens 1000GENOMES:phase_3:ACB African Caribbean in Barbad…          96 #>  2 homo_sapiens 1000GENOMES:phase_3:AFR African                              661 #>  3 homo_sapiens 1000GENOMES:phase_3:ALL All phase 3 individuals             2504 #>  4 homo_sapiens 1000GENOMES:phase_3:AMR American                             347 #>  5 homo_sapiens 1000GENOMES:phase_3:ASW African Ancestry in Southwe…          61 #>  6 homo_sapiens 1000GENOMES:phase_3:BEB Bengali in Bangladesh                 86 #>  7 homo_sapiens 1000GENOMES:phase_3:CDX Chinese Dai in Xishuangbann…          93 #>  8 homo_sapiens 1000GENOMES:phase_3:CEU Utah residents with Norther…          99 #>  9 homo_sapiens 1000GENOMES:phase_3:CHB Han Chinese in Bejing, China         103 #> 10 homo_sapiens 1000GENOMES:phase_3:CHS Southern Han Chinese, China          105 #> # ℹ 27 more rows"},{"path":"https://rmagno.eu/ensemblr/reference/get_rest_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the current version of the Ensembl REST API — get_rest_version","title":"Retrieve the current version of the Ensembl REST API — get_rest_version","text":"Retrieve current version Ensembl REST API","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_rest_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the current version of the Ensembl REST API — get_rest_version","text":"","code":"get_rest_version(verbose = FALSE, warnings = TRUE)"},{"path":"https://rmagno.eu/ensemblr/reference/get_rest_version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the current version of the Ensembl REST API — get_rest_version","text":"verbose Whether chatty. warnings Whether print warnings.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_rest_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the current version of the Ensembl REST API — get_rest_version","text":"scalar character vector Ensembl REST API version.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_software_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the Perl API version — get_software_version","title":"Retrieve the Perl API version — get_software_version","text":"Retrieve Perl API version","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_software_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the Perl API version — get_software_version","text":"","code":"get_software_version(verbose = FALSE, warnings = TRUE)"},{"path":"https://rmagno.eu/ensemblr/reference/get_software_version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the Perl API version — get_software_version","text":"verbose Whether chatty. warnings Whether print warnings.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_software_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the Perl API version — get_software_version","text":"scalar integer vector Perl API version.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_species.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Ensembl species — get_species","title":"Get Ensembl species — get_species","text":"function retrieves species-level information. data returned tibble row species columns metadata species. See section Value details column.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Ensembl species — get_species","text":"","code":"get_species(   division = get_divisions(),   verbose = FALSE,   warnings = TRUE,   progress_bar = TRUE )"},{"path":"https://rmagno.eu/ensemblr/reference/get_species.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Ensembl species — get_species","text":"division Ensembl division, e.g., \"EnsemblVertebrates\" \"EnsemblBacteria\", combination several divisions. Check function get_divisions get available Ensembl divisions. verbose Whether verbose http requests respective responses' status. warnings Whether show warnings. progress_bar Whether show progress bar.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_species.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Ensembl species — get_species","text":"tibble 12 variables: division Ensembl division: \"EnsemblVertebrates\",   \"EnsemblMetazoa\", \"EnsemblPlants\", \"EnsemblProtists\",   \"EnsemblFungi\" \"EnsemblBacteria\". taxon_id NCBI taxon identifier. species_name Ensembl species name: name used internally   Ensembl uniquely identify species name. scientific   name formatted without capitalisation spacing converted   underscore, e.g., 'homo_sapiens'. species_display_name Species display name: name used display   Ensembl website. species_common_name Species common name. release Ensembl release version. genome_assembly_name Code name genome assembly. genbank_assembly_accession Genbank assembly accession identifier. strain Species strain. strain_collection Species strain collection. species_aliases names acronyms used refer   species. Note column list type. groups Ensembl databases data exists species.   Note column list type.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_toplevel_sequence_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Get toplevel sequences details — get_toplevel_sequence_info","title":"Get toplevel sequences details — get_toplevel_sequence_info","text":"function retrieves extra details toplevel sequence. sequences correspond genomic regions genome assembly component another sequence region. Thus, toplevel sequences chromosomes unlocalised unplaced scaffolds.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_toplevel_sequence_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get toplevel sequences details — get_toplevel_sequence_info","text":"","code":"get_toplevel_sequence_info(   species_name = \"homo_sapiens\",   toplevel_sequence = c(1:22, \"X\", \"Y\", \"MT\"),   verbose = FALSE,   warnings = TRUE,   progress_bar = TRUE )"},{"path":"https://rmagno.eu/ensemblr/reference/get_toplevel_sequence_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get toplevel sequences details — get_toplevel_sequence_info","text":"species_name species name, .e., scientific name, letters lowercase space replaced underscore. Examples: 'homo_sapiens' (human), 'ovis_aries' (Domestic sheep) 'capra_hircus' (Goat). toplevel_sequence toplevel sequence name, e.g. chromosome names \"1\", \"X\", \"Y\", non-chromosome sequence, e.g., scaffold \"KI270757.1\". verbose Whether chatty. warnings Whether print warnings. progress_bar Whether show progress bar.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_toplevel_sequence_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get toplevel sequences details — get_toplevel_sequence_info","text":"tibble, row toplevel sequence, 8 variables: species_name Ensembl species name: name used internally Ensembl uniquely identify species name. scientific name formatted without capitalisation spacing converted underscore, e.g., 'homo_sapiens'. toplevel_sequence Name toplevel sequence. is_chromosome logical indicating whether toplevel sequence chromosome (TRUE) (FALSE). coord_system Coordinate system type. assembly_exception_type Coordinate system type. is_circular logical indicating whether toplevel sequence circular sequence (TRUE) (FALSE). assembly_name Assembly name. length Genomic length toplevel sequence base pairs.","code":""},{"path":[]},{"path":"https://rmagno.eu/ensemblr/reference/get_toplevel_sequence_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get toplevel sequences details — get_toplevel_sequence_info","text":"","code":"# Get details about human chromosomes (default) get_toplevel_sequence_info() #> # A tibble: 25 × 8 #>    species_name toplevel_sequence is_chromosome coordinate_system #>    <chr>        <chr>             <lgl>         <chr>             #>  1 homo_sapiens 1                 TRUE          chromosome        #>  2 homo_sapiens 2                 TRUE          chromosome        #>  3 homo_sapiens 3                 TRUE          chromosome        #>  4 homo_sapiens 4                 TRUE          chromosome        #>  5 homo_sapiens 5                 TRUE          chromosome        #>  6 homo_sapiens 6                 TRUE          chromosome        #>  7 homo_sapiens 7                 TRUE          chromosome        #>  8 homo_sapiens 8                 TRUE          chromosome        #>  9 homo_sapiens 9                 TRUE          chromosome        #> 10 homo_sapiens 10                TRUE          chromosome        #> # ℹ 15 more rows #> # ℹ 4 more variables: assembly_exception_type <chr>, is_circular <lgl>, #> #   assembly_name <chr>, length <int>  # Get details about a scaffold # (To find available toplevel sequences to query use the function # `get_toplevel_sequences()`) get_toplevel_sequence_info(species_name = 'homo_sapiens', toplevel_sequence = 'KI270757.1') #> # A tibble: 1 × 8 #>   species_name toplevel_sequence is_chromosome coordinate_system #>   <chr>        <chr>             <lgl>         <chr>             #> 1 homo_sapiens KI270757.1        FALSE         scaffold          #> # ℹ 4 more variables: assembly_exception_type <chr>, is_circular <lgl>, #> #   assembly_name <chr>, length <int>"},{"path":"https://rmagno.eu/ensemblr/reference/get_toplevel_sequences.html","id":null,"dir":"Reference","previous_headings":"","what":"Get toplevel sequences by species — get_toplevel_sequences","title":"Get toplevel sequences by species — get_toplevel_sequences","text":"function retrieves toplevel sequences. sequences correspond genomic regions genome assembly component another sequence region. Thus, toplevel sequences chromosomes unlocalised unplaced scaffolds.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_toplevel_sequences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get toplevel sequences by species — get_toplevel_sequences","text":"","code":"get_toplevel_sequences(   species_name = \"homo_sapiens\",   verbose = FALSE,   warnings = TRUE,   progress_bar = TRUE )"},{"path":"https://rmagno.eu/ensemblr/reference/get_toplevel_sequences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get toplevel sequences by species — get_toplevel_sequences","text":"species_name species name, .e., scientific name, letters lowercase space replaced underscore. Examples: 'homo_sapiens' (human), 'ovis_aries' (Domestic sheep) 'capra_hircus' (Goat). verbose Whether chatty. warnings Whether print warnings. progress_bar Whether show progress bar.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_toplevel_sequences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get toplevel sequences by species — get_toplevel_sequences","text":"tibble, row toplevel sequence, 4 variables: species_name Ensembl species name: name used internally Ensembl uniquely identify species name. scientific name formatted without capitalisation spacing converted underscore, e.g., 'homo_sapiens'. coord_system Coordinate system type. toplevel_sequence Name toplevel sequence. length Genomic length toplevel sequence base pairs.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_toplevel_sequences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get toplevel sequences by species — get_toplevel_sequences","text":"","code":"# Get toplevel sequences for the human genome (default) get_toplevel_sequences() #> # A tibble: 194 × 4 #>    species_name coord_system toplevel_sequence length #>    <chr>        <chr>        <chr>              <int> #>  1 homo_sapiens scaffold     KI270757.1         71251 #>  2 homo_sapiens scaffold     KI270741.1        157432 #>  3 homo_sapiens scaffold     KI270756.1         79590 #>  4 homo_sapiens scaffold     KI270730.1        112551 #>  5 homo_sapiens scaffold     KI270739.1         73985 #>  6 homo_sapiens scaffold     KI270738.1         99375 #>  7 homo_sapiens scaffold     KI270737.1        103838 #>  8 homo_sapiens scaffold     KI270312.1           998 #>  9 homo_sapiens scaffold     KI270591.1          5796 #> 10 homo_sapiens scaffold     KI270371.1          2805 #> # ℹ 184 more rows  # Get toplevel sequences for Caenorhabditis elegans get_toplevel_sequences('caenorhabditis_elegans') #> # A tibble: 7 × 4 #>   species_name           coord_system toplevel_sequence   length #>   <chr>                  <chr>        <chr>                <int> #> 1 caenorhabditis_elegans chromosome   I                 15072434 #> 2 caenorhabditis_elegans chromosome   II                15279421 #> 3 caenorhabditis_elegans chromosome   III               13783801 #> 4 caenorhabditis_elegans chromosome   IV                17493829 #> 5 caenorhabditis_elegans chromosome   V                 20924180 #> 6 caenorhabditis_elegans chromosome   X                 17718942 #> 7 caenorhabditis_elegans chromosome   MtDNA                13794"},{"path":"https://rmagno.eu/ensemblr/reference/get_variant_consequences.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve variant consequences — get_variant_consequences","title":"Retrieve variant consequences — get_variant_consequences","text":"function retrieves variant consequence types. details check Ensembl Variation - Calculated variant consequences.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_variant_consequences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve variant consequences — get_variant_consequences","text":"","code":"get_variant_consequences(verbose = FALSE, warnings = TRUE)"},{"path":"https://rmagno.eu/ensemblr/reference/get_variant_consequences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve variant consequences — get_variant_consequences","text":"verbose Whether chatty underlying requests. warnings Whether print warnings.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_variant_consequences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve variant consequences — get_variant_consequences","text":"tibble, row variant consequence, four variables: SO_accession Sequence Ontology accession, e.g., ':0001626'. SO_term Sequence Ontology term, e.g., 'incomplete_terminal_codon_variant'. label Display term. description Sequence Ontology description.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_variant_consequences.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve variant consequences — get_variant_consequences","text":"rule-based approach used predict effects allele variant may transcript. effects variant consequences, catalogued consequence terms, defined Sequence Ontology. See diagram showing location display term relative transcript structure:","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_variant_consequences.html","id":"ensembl-rest-api-endpoints","dir":"Reference","previous_headings":"","what":"Ensembl REST API endpoints","title":"Retrieve variant consequences — get_variant_consequences","text":"get_variant_consequence_types makes GET requests /info/variation/consequence_types.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_variant_consequences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve variant consequences — get_variant_consequences","text":"","code":"# Retrieve variant consequence types get_variant_consequences() #> # A tibble: 41 × 4 #>    SO_accession SO_term                            label             description #>    <chr>        <chr>                              <chr>             <chr>       #>  1 SO:0001566   regulatory_region_variant          regulatory regio… A sequence… #>  2 SO:0001782   TF_binding_site_variant            TF binding site   A sequence… #>  3 SO:0001632   downstream_gene_variant            downstream gene … A sequence… #>  4 SO:0001574   splice_acceptor_variant            splice acceptor … A splice v… #>  5 SO:0001792   non_coding_transcript_exon_variant non coding trans… A sequence… #>  6 SO:0001575   splice_donor_variant               splice donor var… A splice v… #>  7 SO:0001628   intergenic_variant                 intergenic varia… A sequence… #>  8 SO:0001891   regulatory_region_amplification    regulatory regio… A feature … #>  9 SO:0001567   stop_retained_variant              stop retained va… A sequence… #> 10 SO:0001580   coding_sequence_variant            coding sequence … A sequence… #> # ℹ 31 more rows"},{"path":"https://rmagno.eu/ensemblr/reference/get_variation_sources.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve variant sources — get_variation_sources","title":"Retrieve variant sources — get_variation_sources","text":"function retrieves variant sources, .e. list databases used Ensembl variant information retrieved.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_variation_sources.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve variant sources — get_variation_sources","text":"","code":"get_variation_sources(   species_name = \"human\",   verbose = FALSE,   warnings = TRUE,   progress_bar = TRUE )"},{"path":"https://rmagno.eu/ensemblr/reference/get_variation_sources.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve variant sources — get_variation_sources","text":"species_name species name, .e., scientific name, letters lowercase space replaced underscore. Examples: 'homo_sapiens' (human), 'ovis_aries' (Domestic sheep) 'capra_hircus' (Goat). verbose Whether chatty. warnings Whether print warnings. progress_bar Whether show progress bar.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_variation_sources.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve variant sources — get_variation_sources","text":"tibble, row variant database, 8 variables: species_name Ensembl species name: name used internally Ensembl uniquely identify species name. scientific name formatted without capitalisation spacing converted underscore, e.g., 'homo_sapiens'. db_name Database name. type Database type, e.g., chip (genotyping chip) lsdb (locus-specific database). version Database version. somatic_status Somatic status. description Database description. url Database's URL. data_types Data types found database.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_variation_sources.html","id":"ensembl-rest-api-endpoints","dir":"Reference","previous_headings":"","what":"Ensembl REST API endpoints","title":"Retrieve variant sources — get_variation_sources","text":"get_variation_sources makes GET requests info/variation/:species.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_variation_sources.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve variant sources — get_variation_sources","text":"","code":"# Retrieve variant sources for human (default) get_variation_sources() #> # A tibble: 37 × 8 #>    species_name db_name           type  version somatic_status description url   #>    <chr>        <chr>             <chr> <chr>   <chr>          <chr>       <chr> #>  1 human        dbSNP             NA    154     mixed          Variants (… http… #>  2 human        Archive dbSNP     NA    154     mixed          Former dbS… http… #>  3 human        dbSNP HGVS        NA    154     mixed          HGVS annot… http… #>  4 human        Former dbSNP      NA    154     mixed          Former dbS… http… #>  5 human        PharmGKB          NA    28/02/… germline       A pharmaco… http… #>  6 human        HGMD-PUBLIC       NA    2020.4  germline       Variants f… http… #>  7 human        DGVa              NA    01/2020 mixed          Database o… http… #>  8 human        NHGRI-EBI GWAS c… NA    03/03/… germline       Variants a… http… #>  9 human        EGA               NA    03/2023 germline       Variants i… http… #> 10 human        UniProt           NA    28/02/… mixed          Variants w… http… #> # ℹ 27 more rows #> # ℹ 1 more variable: data_types <list>  # Retrieve variant sources for mouse get_variation_sources(species_name = 'mus_musculus') #> # A tibble: 6 × 8 #>   species_name db_name type  version somatic_status description url   data_types #>   <chr>        <chr>   <chr> <chr>   <chr>          <chr>       <chr> <list>     #> 1 mus_musculus dbSNP   NA    150     mixed          Variants (… http… <chr [1]>  #> 2 mus_musculus Archiv… NA    150     mixed          Former var… http… <chr [1]>  #> 3 mus_musculus DGVa    NA    05/2018 mixed          Database o… http… <chr [2]>  #> 4 mus_musculus IMPC    NA    28/11/… germline       Internatio… http… <chr [1]>  #> 5 mus_musculus MGI     NA    28/11/… germline       Mouse Geno… http… <chr [1]>  #> 6 mus_musculus EVA     NA    4       germline       Short vari… http… <chr [1]>"},{"path":"https://rmagno.eu/ensemblr/reference/get_versioning.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Ensembl REST versions — get_versioning","title":"Retrieve Ensembl REST versions — get_versioning","text":"function gets versions different entities involved REST API requests. accessing Ensembl REST API, actually accessing three interconnected entities: Ensembl databases (data). Perl API (software). REST API (rest).","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_versioning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Ensembl REST versions — get_versioning","text":"","code":"get_versioning(verbose = FALSE, warnings = TRUE)"},{"path":"https://rmagno.eu/ensemblr/reference/get_versioning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Ensembl REST versions — get_versioning","text":"verbose Whether chatty. warnings Whether print warnings.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_versioning.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Ensembl REST versions — get_versioning","text":"named list three elements: data, software  rest.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_versioning.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Ensembl REST versions — get_versioning","text":"","code":"# Get the versions of the different entities involved in the REST API # requests. get_versioning() #> $data #> [1] 110 #>  #> $software #> [1] 110 #>  #> $rest #> [1] \"15.6\" #>"},{"path":"https://rmagno.eu/ensemblr/reference/get_xrefs_by_ensembl_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Get cross-references by Ensembl ID — get_xrefs_by_ensembl_id","title":"Get cross-references by Ensembl ID — get_xrefs_by_ensembl_id","text":"function retrieves cross-references external databases Ensembl identifier. data returned tibble row cross reference related provided Ensembl identifier. See section Value details column.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_xrefs_by_ensembl_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get cross-references by Ensembl ID — get_xrefs_by_ensembl_id","text":"","code":"get_xrefs_by_ensembl_id(   species_name,   ensembl_id,   all_levels = FALSE,   ensembl_db = \"core\",   external_db = \"\",   feature = \"\",   verbose = FALSE,   warnings = TRUE,   progress_bar = TRUE )"},{"path":"https://rmagno.eu/ensemblr/reference/get_xrefs_by_ensembl_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get cross-references by Ensembl ID — get_xrefs_by_ensembl_id","text":"species_name species name, .e., scientific name, letters lowercase space replaced underscore. Examples: 'homo_sapiens' (human), 'ovis_aries' (Domestic sheep) 'capra_hircus' (Goat). ensembl_id Ensembl stable identifier, e.g. \"ENSG00000248234378\". all_levels logical vector. Set find genetic features linked stable ID, fetch external references . Specifying gene also return values transcripts translations. ensembl_db Restrict search Ensembl database: typically one 'core', 'rnaseq', 'cdna', 'funcgen' 'otherfeatures'. external_db External database filtered . default filtering applied. feature Restrict search feature type: gene ('gene'), exon ('exon'), transcript ('transcript'), protein ('translation'). verbose Whether verbose http requests respective responses' status. warnings Whether show warnings. progress_bar Whether show progress bar.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_xrefs_by_ensembl_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get cross-references by Ensembl ID — get_xrefs_by_ensembl_id","text":"tibble 12 variables: species_name Ensembl species name: name used internally Ensembl uniquely identify species name. scientific name formatted without capitalisation spacing converted underscore, e.g., 'homo_sapiens'. ensembl_id Ensembl stable identifier, e.g. \"ENSG00000248234378\". ensembl_db Ensembl database. primary_id Primary identification external database. display_id Display identification external database. external_db_name External database name. external_db_display_name External database display name. version TODO info_type two types external cross references (XRef): direct ('DIRECT') dependent ('DEPENDENT'). direct cross reference one can directly linked gene, transcript translation object Ensembl Genomes synonymy sequence similarity. dependent cross reference one transitively linked object via direct cross reference. value can also 'UNMAPPED' unmapped cross references, 'PROJECTION' TODO. info_text TODO synonyms names acronyms used refer external database entry. Note column list type. description Brief description external database entry.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_xrefs_by_ensembl_id.html","id":"ensembl-rest-api-endpoints","dir":"Reference","previous_headings":"","what":"Ensembl REST API endpoints","title":"Get cross-references by Ensembl ID — get_xrefs_by_ensembl_id","text":"get_xrefs_by_ensembl_id() makes GET requests /xrefs/id/:id.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_xrefs_by_ensembl_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get cross-references by Ensembl ID — get_xrefs_by_ensembl_id","text":"","code":"get_xrefs_by_ensembl_id('human', 'ENSG00000248378') #> # A tibble: 1 × 12 #>   species_name ensembl_id      ensembl_db primary_id display_id external_db_name #>   <chr>        <chr>           <chr>      <chr>      <chr>      <chr>            #> 1 human        ENSG00000248378 core       ENSG00000… ENSG00000… ArrayExpress     #> # ℹ 6 more variables: external_db_display_name <chr>, version <chr>, #> #   info_type <chr>, info_text <chr>, synonyms <list>, description <lgl>  get_xrefs_by_ensembl_id('human', 'ENSG00000248378', all_levels = TRUE) #> # A tibble: 3 × 12 #>   species_name ensembl_id      ensembl_db primary_id display_id external_db_name #>   <chr>        <chr>           <chr>      <chr>      <chr>      <chr>            #> 1 human        ENSG00000248378 core       ENSG00000… ENSG00000… ArrayExpress     #> 2 human        ENSG00000248378 core       uc063csj.1 uc063csj.1 UCSC             #> 3 human        ENSG00000248378 core       URS000007… URS000007… RNAcentral       #> # ℹ 6 more variables: external_db_display_name <chr>, version <chr>, #> #   info_type <chr>, info_text <chr>, synonyms <list>, description <lgl>"},{"path":"https://rmagno.eu/ensemblr/reference/get_xrefs_by_gene.html","id":null,"dir":"Reference","previous_headings":"","what":"Get cross references by gene symbol or name — get_xrefs_by_gene","title":"Get cross references by gene symbol or name — get_xrefs_by_gene","text":"function retrieves cross references symbol display name gene. data returned tibble row cross reference related provided symbol display name gene. See section Value details column.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_xrefs_by_gene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get cross references by gene symbol or name — get_xrefs_by_gene","text":"","code":"get_xrefs_by_gene(   species_name,   gene,   ensembl_db = \"core\",   external_db = \"\",   verbose = FALSE,   warnings = TRUE,   progress_bar = TRUE )"},{"path":"https://rmagno.eu/ensemblr/reference/get_xrefs_by_gene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get cross references by gene symbol or name — get_xrefs_by_gene","text":"species_name species name, .e., scientific name, letters lowercase space replaced underscore. Examples: 'homo_sapiens' (human), 'ovis_aries' (Domestic sheep) 'capra_hircus' (Goat). gene Symbol display name gene, e.g., 'ACTB' 'BRCA2'. ensembl_db Restrict search database default. Ensembl's default database 'core'. external_db Filter external database, e.g. 'HGNC'. empty string indicates filtering. verbose Whether verbose http requests respective responses' status. warnings Whether show warnings. progress_bar Whether show progress bar.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_xrefs_by_gene.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get cross references by gene symbol or name — get_xrefs_by_gene","text":"tibble 12 variables: species_name Ensembl species name: name used internally Ensembl uniquely identify species name. scientific name formatted without capitalisation spacing converted underscore, e.g., 'homo_sapiens'. gene Gene symbol. ensembl_db Ensembl database. primary_id Primary identification external database. display_id Display identification external database. external_db_name External database name. external_db_display_name External database display name. version TODO info_type two types external cross references (XRef): direct ('DIRECT') dependent ('DEPENDENT'). direct cross reference one can directly linked gene, transcript translation object Ensembl Genomes synonymy sequence similarity. dependent cross reference one transitively linked object via direct cross reference. value can also 'UNMAPPED' unmapped cross references, 'PROJECTION' TODO. info_text TODO synonyms names acronyms used refer gene. Note column list type. description Brief description external database entry.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_xrefs_by_gene.html","id":"ensembl-rest-api-endpoints","dir":"Reference","previous_headings":"","what":"Ensembl REST API endpoints","title":"Get cross references by gene symbol or name — get_xrefs_by_gene","text":"get_xrefs_by_gene() makes GET requests /xrefs/name/:species/:name.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/get_xrefs_by_gene.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get cross references by gene symbol or name — get_xrefs_by_gene","text":"","code":"# Get cross references that relate to gene BRCA2 get_xrefs_by_gene(species_name = 'human', gene = 'BRCA2') #> # A tibble: 9 × 12 #>   species_name gene  ensembl_db primary_id display_id external_db_name #>   <chr>        <chr> <chr>      <chr>      <chr>      <chr>            #> 1 human        BRCA2 core       675        BRCA2      EntrezGene       #> 2 human        BRCA2 core       1101       BRCA2      GeneCards        #> 3 human        BRCA2 core       HGNC:1101  BRCA2      HGNC             #> 4 human        BRCA2 core       A0A8V8TQQ4 BRCA2      Uniprot_gn       #> 5 human        BRCA2 core       P51587     BRCA2      Uniprot_gn       #> 6 human        BRCA2 core       A0A7P0TAP7 BRCA2      Uniprot_gn       #> 7 human        BRCA2 core       A0A7P0T9D7 BRCA2      Uniprot_gn       #> 8 human        BRCA2 core       675        BRCA2      WikiGene         #> 9 human        BRCA2 core       IPR015525  BRCA2      Interpro         #> # ℹ 6 more variables: external_db_display_name <chr>, version <chr>, #> #   info_type <chr>, info_text <chr>, synonyms <list>, description <chr>"},{"path":"https://rmagno.eu/ensemblr/reference/is_ensembl_reachable.html","id":null,"dir":"Reference","previous_headings":"","what":"Is the Ensembl REST API server reachable? — is_ensembl_reachable","title":"Is the Ensembl REST API server reachable? — is_ensembl_reachable","text":"Check Ensembl server REST API service running reachable. function attempts connect https://rest.ensembl.org, returning TRUE success, FALSE otherwise. Set verbose = TRUE step step description connection attempt.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/is_ensembl_reachable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is the Ensembl REST API server reachable? — is_ensembl_reachable","text":"","code":"is_ensembl_reachable(url = ensembl_server(), port = 443L, verbose = FALSE)"},{"path":"https://rmagno.eu/ensemblr/reference/is_ensembl_reachable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is the Ensembl REST API server reachable? — is_ensembl_reachable","text":"url Ensembl REST API server URL. Default https://rest.ensembl.org. need change parameter. port Network port ping server. need change parameter. verbose Whether verbose (TRUE) (FALSE).","code":""},{"path":"https://rmagno.eu/ensemblr/reference/is_ensembl_reachable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is the Ensembl REST API server reachable? — is_ensembl_reachable","text":"logical value: TRUE EBI server reachable, FALSE otherwise.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/is_ensembl_reachable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is the Ensembl REST API server reachable? — is_ensembl_reachable","text":"","code":"# Check if the Ensembl Server is reachable is_ensembl_reachable() # Returns TRUE or FALSE. #> [1] TRUE  # Check if the GWAS Catalog Server is reachable # and show exactly at what step is it failing (if that is the case) is_ensembl_reachable(verbose = TRUE) #> Am I online? Yes. #> Is there a DNS service running? Yes. #> Connected to the internet? Yes. #> Ping'ing rest.ensembl.org on port 443... #> rest.ensembl.org successfully replied in 148.366 ms. #> [1] TRUE"},{"path":"https://rmagno.eu/ensemblr/reference/pairwise_combn.html","id":null,"dir":"Reference","previous_headings":"","what":"Pairwise combinations — pairwise_combn","title":"Pairwise combinations — pairwise_combn","text":"Generates pairwise combinations supplied vector. Never returns pairs self self.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/pairwise_combn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pairwise combinations — pairwise_combn","text":"","code":"pairwise_combn(x)"},{"path":"https://rmagno.eu/ensemblr/reference/pairwise_combn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pairwise combinations — pairwise_combn","text":"x character vector generate combinations.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/pairwise_combn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pairwise combinations — pairwise_combn","text":"tibble two columns row   pairwise combination.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://rmagno.eu/ensemblr/reference/request.html","id":null,"dir":"Reference","previous_headings":"","what":"Request an endpoint from Ensembl REST API — request","title":"Request an endpoint from Ensembl REST API — request","text":"Performs GET request endpoint specified resource_url.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Request an endpoint from Ensembl REST API — request","text":"","code":"request(   resource_url,   base_url = ensembl_server(),   verbose = FALSE,   warnings = TRUE )"},{"path":"https://rmagno.eu/ensemblr/reference/request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Request an endpoint from Ensembl REST API — request","text":"resource_url Endpoint URL. endpoint internally appended base_url. start forward slash ('/'). base_url Ensembl REST API base URL. verbose Whether verbose. warnings Whether print warnings.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/request.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Request an endpoint from Ensembl REST API — request","text":"named list four elements: url URL endpoint. response_code HTTP status code. status string describing status response obtained: \"OK\" successful description error. content parsed JSON nested list, returned fromJSON.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/request_parallel.html","id":null,"dir":"Reference","previous_headings":"","what":"Parallel version of request — request_parallel","title":"Parallel version of request — request_parallel","text":"Performs GET request endpoints specified resource_urls.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/request_parallel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parallel version of request — request_parallel","text":"","code":"request_parallel(   resource_urls,   verbose = FALSE,   warnings = TRUE,   progress_bar = TRUE )"},{"path":"https://rmagno.eu/ensemblr/reference/request_parallel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parallel version of request — request_parallel","text":"resource_urls Vector endpoint URLs. endpoint internally appended base_url. start forward slash ('/'). verbose Whether verbose. warnings Whether print warnings. progress_bar Whether show progress bar.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/request_parallel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parallel version of request — request_parallel","text":"list named lists four elements: url URL endpoint. response_code HTTP status code. status string describing status response obtained: \"OK\" successful description error. content parsed JSON nested list, returned fromJSON.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/rest_api_endpoints.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensembl REST API Endpoints. — rest_api_endpoints","title":"Ensembl REST API Endpoints. — rest_api_endpoints","text":"dataset containing Ensembl REST API endpoints, listed https://rest.ensembl.org/.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/rest_api_endpoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensembl REST API Endpoints. — rest_api_endpoints","text":"","code":"rest_api_endpoints"},{"path":"https://rmagno.eu/ensemblr/reference/rest_api_endpoints.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Ensembl REST API Endpoints. — rest_api_endpoints","text":"data frame 118 rows 4 variables: section Section. endpoint Ensembl REST API endpoint. description short description resource. last_update_date Time stamp last time dataset downloaded Ensembl.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/rest_api_endpoints.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Ensembl REST API Endpoints. — rest_api_endpoints","text":"https://rest.ensembl.org/","code":""},{"path":"https://rmagno.eu/ensemblr/reference/strand_to_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert strand values to integer codes — strand_to_code","title":"Convert strand values to integer codes — strand_to_code","text":"function converts character vector values 'forward' 'reverse' 1 -1, respectively.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/strand_to_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert strand values to integer codes — strand_to_code","text":"","code":"strand_to_code(strand, .default = NA_integer_, .missing = NA_integer_)"},{"path":"https://rmagno.eu/ensemblr/reference/strand_to_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert strand values to integer codes — strand_to_code","text":"strand Character vector strandness values: 'forward' 'reverse'. .default value use default values 'forward' 'reverse'. .missing value use recoding NA_character_.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/strand_to_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert strand values to integer codes — strand_to_code","text":"integer vector.","code":""},{"path":[]},{"path":"https://rmagno.eu/ensemblr/reference/user_agent_id.html","id":null,"dir":"Reference","previous_headings":"","what":"User agent identification — user_agent_id","title":"User agent identification — user_agent_id","text":"Generates S3 request object defined package httr, used identify package user agent requests Ensembl REST API. user agent identification string : \"ensemblr: R Client Ensembl REST API\".","code":""},{"path":"https://rmagno.eu/ensemblr/reference/user_agent_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"User agent identification — user_agent_id","text":"","code":"user_agent_id()"},{"path":"https://rmagno.eu/ensemblr/reference/user_agent_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"User agent identification — user_agent_id","text":"S3 request object defined package httr.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/warn_when_request_errored.html","id":null,"dir":"Reference","previous_headings":"","what":"Warn if response errored — warn_when_request_errored","title":"Warn if response errored — warn_when_request_errored","text":"Warn httr response errored. also returns tidy warning message.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/warn_when_request_errored.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Warn if response errored — warn_when_request_errored","text":"","code":"warn_when_request_errored(response)"},{"path":"https://rmagno.eu/ensemblr/reference/warn_when_request_errored.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Warn if response errored — warn_when_request_errored","text":"response response object.","code":""},{"path":"https://rmagno.eu/ensemblr/reference/warn_when_request_errored.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Warn if response errored — warn_when_request_errored","text":"scalar character vector warning message, string  'OK' response successful, although function   called mostly side effect, .e., triggering warning.","code":""}]
